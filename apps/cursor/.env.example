# ==================================
# Supabase 配置（用于数据库和认证）
# ==================================
# 获取方法：访问 https://supabase.com 创建项目后在 Project Settings -> API 获取

# 项目 URL，用于客户端连接 Supabase 服务
# 格式：https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_URL=                 

# 公共访问密钥，用于客户端进行有限制的数据库操作
# 格式：以 eyJh 开头的字符串
NEXT_PUBLIC_SUPABASE_ANON_KEY=           

# 服务端访问密钥，用于服务器端进行完整的数据库操作
# 格式：以 eyJh 开头的字符串
SUPABASE_SERVICE_ROLE_KEY=               

# JWT 密钥，用于验证用户身份令牌
# 在 Project Settings -> JWT Settings 获取
SUPABASE_JWT_SECRET=                     

# ==================================
# Upstash Redis 配置（用于缓存和队列）
# ==================================
# 获取方法：访问 https://upstash.com 创建 Redis 数据库后在 Details 页面获取

# Redis REST API 的访问地址
# 格式：https://xxx.upstash.io
UPSTASH_REDIS_REST_URL=                  

# Redis REST API 的访问令牌
# 格式：以 AYJ 开头的字符串
UPSTASH_REDIS_REST_TOKEN=                

# ==================================
# 应用配置（基础设置）
# ==================================
# 本地开发使用默认值，生产环境需要修改为实际域名

# 应用的完整访问地址，用于生成链接和重定向
NEXT_PUBLIC_APP_URL=http://localhost:3000     

# API 的基础地址，用于客户端请求后端接口
NEXT_PUBLIC_API_URL=http://localhost:3000/api 

# 运行环境标识：development（开发）/ production（生产）
NODE_ENV=development                          

# 应用运行的端口号
PORT=3000                                    

# ==================================
# 邮件配置（用于发送通知邮件）
# ==================================
# 如果使用 Gmail，需要在 Google Account -> Security -> 2-Step Verification -> App passwords 生成密码

# SMTP 服务器地址
EMAIL_SERVER_HOST=smtp.gmail.com             

# SMTP 服务器端口
EMAIL_SERVER_PORT=587                        

# SMTP 登录用户名
EMAIL_SERVER_USER=                           

# SMTP 登录密码（Gmail 需使用应用专用密码）
EMAIL_SERVER_PASSWORD=                       

# 发件人地址（通常与 EMAIL_SERVER_USER 相同）
EMAIL_FROM=                                  

# ==================================
# Resend 邮件服务配置（推荐使用）
# ==================================
# 获取方法：访问 https://resend.com 注册账号，在 API Keys 页面创建

# Resend API 密钥，用于发送邮件
# 格式：以 re_ 开头的字符串
RESEND_API_KEY=                             

# ==================================
# 认证配置（NextAuth.js 设置）
# ==================================

# 认证服务的回调地址，必须与应用 URL 一致
NEXTAUTH_URL=http://localhost:3000           

# 用于加密会话的密钥，可使用命令生成：openssl rand -base64 32
NEXTAUTH_SECRET=                            

# ==================================
# API 配置（第三方服务集成）
# ==================================

# OpenAI API 密钥，用于 AI 功能
# 获取：https://platform.openai.com/api-keys
OPENAI_API_KEY=                             

# Anthropic API 密钥，用于 Claude AI 功能
# 获取：https://console.anthropic.com/
ANTHROPIC_API_KEY=                          

# ==================================
# 数据库配置
# ==================================
# 本地开发需要先创建数据库：createdb directories

# PostgreSQL 数据库连接字符串
# 格式：postgresql://用户名:密码@主机:端口/数据库名
DATABASE_URL=postgresql://postgres:password@localhost:5432/directories

# ==================================
# Polar 配置（职位和 MCP 管理）
# ==================================
# 获取方法：访问 https://polar.sh 注册账号并在开发者设置中配置

# Polar API 访问令牌
POLAR_ACCESS_TOKEN=                         

# 环境设置：sandbox（测试）/ production（生产）
POLAR_ENVIRONMENT=sandbox                   

# Webhook 密钥，用于验证 Polar 的回调请求
POLAR_WEBHOOK_SECRET=                       

# ==================================
# Polar 产品配置 - 生产环境
# ==================================
# 在 Polar 后台创建产品后获取产品 ID

# 职位列表产品 ID
POLAR_JOBS_STANDARD_PRODUCT_ID=             # 标准职位产品
POLAR_JOBS_FEATURED_PRODUCT_ID=             # 特色职位产品
POLAR_JOBS_PREMIUM_PRODUCT_ID=              # 高级职位产品

# MCP 列表产品 ID
POLAR_MCPS_FEATURED_PRODUCT_ID=             # 特色 MCP 产品
POLAR_MCPS_PREMIUM_PRODUCT_ID=              # 高级 MCP 产品

# ==================================
# Polar 产品配置 - 沙箱环境（测试用）
# ==================================
# 在 Polar 沙箱环境创建测试产品后获取产品 ID

# 测试环境职位列表产品 ID
POLAR_SANDBOX_JOBS_STANDARD_PRODUCT_ID=     # 测试标准职位产品
POLAR_SANDBOX_JOBS_FEATURED_PRODUCT_ID=     # 测试特色职位产品
POLAR_SANDBOX_JOBS_PREMIUM_PRODUCT_ID=      # 测试高级职位产品

# 测试环境 MCP 列表产品 ID
POLAR_SANDBOX_MCPS_FEATURED_PRODUCT_ID=     # 测试特色 MCP 产品
POLAR_SANDBOX_MCPS_PREMIUM_PRODUCT_ID=      # 测试高级 MCP 产品

# ==================================
# OpenPanel 配置（分析和监控）
# ==================================
# 获取方法：访问 https://openpanel.dev 注册账号，创建项目后获取

# OpenPanel 客户端标识，用于数据分析
NEXT_PUBLIC_OPENPANEL_CLIENT_ID=            

# ==================================
# 安全配置
# ==================================

# 允许跨域访问的域名列表，多个域名用逗号分隔
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Cookie 加密密钥，可使用命令生成：openssl rand -base64 32
COOKIE_SECRET=                              

# ==================================
# 缓存配置
# ==================================

# 缓存有效期，单位：秒（3600 = 1小时）
CACHE_TTL=3600                             

# 缓存重新验证密钥，可使用命令生成：openssl rand -base64 32
REVALIDATE_SECRET=                         

# ==================================
# 快速开始
# ==================================
# 1. 复制此文件为 .env.local
# 2. 运行 node scripts/generate-secrets.js 生成随机密钥
# 3. 注册必要的服务并获取相应的密钥
# 4. 填写配置项，确保所有必需的值都已设置
# 5. 运行应用：pnpm dev

# ==================================
# 重要注意事项
# ==================================
# 1. 生产环境必须修改所有默认值
# 2. 密钥和令牌不要提交到版本控制系统
# 3. 数据库密码要使用强密码
# 4. Redis URL 必须以 https:// 开头
# 5. 邮件服务建议使用 Resend 而不是 SMTP
# 6. 定期更新密钥以提高安全性
# 7. 在生产环境中使用更长的密钥长度
# 8. 确保所有 URL 使用 HTTPS 协议
# 9. 定期检查服务访问日志
# 10. 遵循最小权限原则配置服务