---
description: TypeScript Monorepo 项目开发规范
globs: ["**/*"]
alwaysApply: true
---

# 开发理念

- 编写清晰、可维护和可扩展的代码
- 遵循 SOLID 原则
- 偏好函数式和声明式编程模式
- 强调类型安全和静态分析
- 实践组件驱动开发

# 代码实现指南

## 规划阶段
- 从逐步规划开始
- 在实现之前编写详细的伪代码
- 记录组件架构和数据流
- 考虑边缘情况和错误场景

## 代码风格
- 使用空格进行缩进
- 字符串使用单引号（除非需要避免转义）
- 省略分号（除非需要消除歧义）
- 消除未使用的变量
- 关键字后添加空格
- 函数声明括号前添加空格
- 始终使用严格相等 (===)
- 中缀运算符两侧添加空格
- 逗号后添加空格
- else 语句与闭合大括号在同一行
- 多行 if 语句使用大括号
- 回调中始终处理错误参数
- 限制行长度为 80 个字符
- 多行对象/数组字面量使用尾随逗号

# 命名约定

## 通用规则
- 使用 PascalCase：
  - 组件
  - 类型定义
  - 接口
- 使用 kebab-case：
  - 目录名（例如：components/auth-wizard）
  - 文件名（例如：user-profile.tsx）
- 使用 camelCase：
  - 变量
  - 函数
  - 方法
  - Hooks
  - 属性
  - Props
- 使用 UPPERCASE：
  - 环境变量
  - 常量
  - 全局配置

## 特定命名模式
- 事件处理程序前缀为 'handle'：handleClick, handleSubmit
- 布尔变量前缀为动词：isLoading, hasError, canSubmit
- 自定义 hooks 前缀为 'use'：useAuth, useForm
- 使用完整单词而不是缩写，除了：
  - err (error)
  - req (request)
  - res (response)
  - props (properties)
  - ref (reference)

# TypeScript 实现

## 核心原则
- 启用严格模式
- 为组件 props、状态和 Redux 状态结构定义清晰的接口
- 使用类型守卫安全处理可能的 undefined 或 null 值
- 在需要类型灵活性的地方应用泛型
- 使用 TypeScript 实用工具类型 (Partial, Pick, Omit)
- 定义对象结构时优先使用 interface，尤其是在扩展时
- 使用映射类型动态创建现有类型的变体

# 错误处理和验证

## 表单验证
- 使用 Zod 进行模式验证
- 实现适当的错误消息
- 使用合适的表单库（例如 React Hook Form）

## 错误边界
- 使用错误边界优雅地捕获和处理 React 组件树中的错误
- 将捕获的错误记录到外部服务（例如 Sentry）以进行跟踪和调试
- 设计用户友好的后备 UI 在发生错误时显示

# 测试规范

## 单元测试
- 编写彻底的单元测试以验证单个函数和组件
- 使用 Jest 和 React Testing Library 进行可靠和高效的测试
- 遵循 Arrange-Act-Assert 模式确保测试的清晰性和一致性
- 模拟外部依赖和 API 调用以隔离单元测试

## 集成测试
- 关注用户工作流以确保应用功能
- 正确设置和拆除测试环境以维护测试独立性
- 选择性地使用快照测试以捕获意外的 UI 更改

# 文档规范

## API 文档
- 所有公共 API 必须有 JSDoc 注释
- 注释必须包含参数说明和返回值类型
- 复杂逻辑需要添加示例代码
- 使用 @see 引用相关文档

## 项目文档
- README 文件必须包含项目描述、安装说明和使用方法
- 每个包都应该有自己的 README.md
- 代码变更需要更新相关文档
- 文档使用 Markdown 格式

# Monorepo 规范

## 包管理
- 使用 pnpm workspace 管理多包项目
- 共享依赖放在根目录的 package.json 中
- 包特定的依赖放在各自的 package.json 中
- 使用 workspace:* 引用工作空间内的包
- 保持依赖版本的一致性
- 避免循环依赖

## 目录结构
- packages/ 目录存放共享库和工具包
- apps/ 目录存放应用程序
- 共享配置放在根目录

## 构建和发布
- 使用统一的构建配置
- 实现增量构建
- 支持独立发布各个包
- 维护版本依赖关系

# 安全性

- 实现输入净化以防止 XSS 攻击
- 使用 DOMPurify 净化 HTML 内容
- 使用适当的身份验证方法
- 避免在代码中硬编码敏感信息
- 实施适当的 CORS 策略
- 使用 HTTPS
- 定期更新依赖以修复安全漏洞
